@using music_manager_starter.Shared
@inject HttpClient Http

<div class="relative">
    <input type="text" placeholder="Search..." class="bg-gray-700 text-white px-4 py-2 rounded-full focus:outline-none w-full"
           @oninput="HandleInputChange">

    <span class="absolute right-3 top-3 text-gray-400">
        <i class="fas fa-search"></i>
    </span>
    //DROPDOWN
    @if (FilteredSongs?.Any() == true)
    {
        <div class="search-dropdown w-full bg-gray-700 rounded-md mt-1 absolute top-full left-0 z-10">
            @foreach (var song in FilteredSongs)
            {
                <div class="px-4 py-2 hover:bg-gray-600 cursor-pointer">
                    <strong>@song.Title</strong> by @song.Artist (@song.Album)
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrEmpty(SearchTerm))
    {
        <div class="search-dropdown w-full bg-gray-700 rounded-md mt-1 absolute top-full left-0 z-10">
            <div class="px-4 py-2 text-gray-400">No songs found</div>
        </div>
    }
</div>

@code {
    private string SearchTerm = string.Empty;
    private List<Song> FilteredSongs;

    private async Task HandleInputChange(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            FilteredSongs.Clear();
            return;
        }

        await PerformSearchAsync();
    }

    private async Task PerformSearchAsync()
    {
        try
        {
            var url = $"api/songs/search?query={SearchTerm}";
            var response = await Http.GetFromJsonAsync<List<Song>>(url);
            FilteredSongs = response;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error Fetching songs: {ex.Message}");
            FilteredSongs = new List<Song>();
        }
    }
}